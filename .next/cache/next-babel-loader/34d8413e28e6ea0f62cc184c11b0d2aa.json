{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Strapi\\\\my-project\\\\pages\\\\login.js\";\nvar __jsx = React.createElement;\nimport React, { useRef } from 'react';\nimport Router from 'next/router';\nvar endpoint = 'http://localhost:1337/auth/local';\nexport default (function () {\n  var loginRef = useRef();\n  var pwdRef = useRef();\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      error = _React$useState2[0],\n      setError = _React$useState2[1];\n\n  var login = function login() {\n    var identifier, password, _ref, jwt, user;\n\n    return _regeneratorRuntime.async(function login$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            identifier = loginRef.current.value;\n            password = pwdRef.current.value;\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(fetch(endpoint, {\n              method: 'POST',\n              headers: {\n                'Content-type': 'application/json'\n              },\n              body: _JSON$stringify({\n                identifier: identifier,\n                password: password\n              })\n            }).then(function (res) {\n              if (res.status !== 200) {\n                throw new Error('Error Loggin In, Non 200 Status code received!');\n              }\n\n              return res.json();\n            }));\n\n          case 5:\n            _ref = _context.sent;\n            jwt = _ref.jwt;\n            user = _ref.user;\n            window.sessionStorage.setItem('jwt', jwt);\n            window.sessionStorage.setItem('user', _JSON$stringify(user));\n            Router.push('/'); //Basically we can redirect user to a specific page after authentication .\n\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](2);\n            setError(_context.t0.toString());\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 13]]);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      width: 300\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"Login\",\n    ref: loginRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    type: \"password\",\n    placeholder: \"Password\",\n    ref: pwdRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    onClick: function onClick() {\n      return login();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \" Login \")), error && __jsx(\"div\", {\n    style: {\n      border: '1px red solid'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, error));\n});","map":{"version":3,"sources":["C:/Users/user/Desktop/Strapi/my-project/pages/login.js"],"names":["React","useRef","Router","endpoint","loginRef","pwdRef","useState","error","setError","login","identifier","current","value","password","fetch","method","headers","body","then","res","status","Error","json","jwt","user","window","sessionStorage","setItem","push","toString","display","flexDirection","width","border"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,IAAMC,QAAQ,GAAG,kCAAjB;AAEA,gBAAc,YAAK;AACf,MAAMC,QAAQ,GAAGH,MAAM,EAAvB;AACA,MAAMI,MAAM,GAAGJ,MAAM,EAArB;;AAFe,wBAGYD,KAAK,CAACM,QAAN,CAAe,EAAf,CAHZ;AAAA;AAAA,MAGRC,KAHQ;AAAA,MAGDC,QAHC;;AAMf,MAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACJC,YAAAA,UADI,GACSN,QAAQ,CAACO,OAAT,CAAiBC,KAD1B;AAEJC,YAAAA,QAFI,GAEOR,MAAM,CAACM,OAAP,CAAeC,KAFtB;AAAA;AAAA;AAAA,6CAKeE,KAAK,CAACX,QAAD,EAAU;AACpCY,cAAAA,MAAM,EAAE,MAD4B;AAEpCC,cAAAA,OAAO,EAAC;AACJ,gCAAiB;AADb,eAF4B;AAKpCC,cAAAA,IAAI,EAAE,gBAAe;AACjBP,gBAAAA,UAAU,EAAVA,UADiB;AAEjBG,gBAAAA,QAAQ,EAARA;AAFiB,eAAf;AAL8B,aAAV,CAAL,CAStBK,IATsB,CAShB,UAAAC,GAAG,EAAG;AACX,kBAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAuB;AACnB,sBAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACH;;AACD,qBAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,aAdwB,CALf;;AAAA;AAAA;AAKHC,YAAAA,GALG,QAKHA,GALG;AAKCC,YAAAA,IALD,QAKCA,IALD;AAoBVC,YAAAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,KAA9B,EAAoCJ,GAApC;AACAE,YAAAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,MAA9B,EAAqC,gBAAeH,IAAf,CAArC;AAEDtB,YAAAA,MAAM,CAAC0B,IAAP,CAAY,GAAZ,EAvBW,CAuBO;;AAvBP;AAAA;;AAAA;AAAA;AAAA;AAyBNpB,YAAAA,QAAQ,CAAC,YAAEqB,QAAF,EAAD,CAAR;;AAzBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AA8BH,SACI,4BACJ;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,OAAO,EAAC,MAAT;AAAiBC,MAAAA,aAAa,EAAE,QAAhC;AAA0CC,MAAAA,KAAK,EAAC;AAAhD,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,OAA/B;AAAwC,IAAA,GAAG,EAAG5B,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADC,EAED;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,WAAW,EAAC,UAAnC;AAA8C,IAAA,GAAG,EAAEC,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFC,EAGD;AAAQ,IAAA,OAAO,EAAG;AAAA,aAAMI,KAAK,EAAX;AAAA,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHC,CADI,EAMHF,KAAK,IAAG;AAAK,IAAA,KAAK,EAAE;AAAC0B,MAAAA,MAAM,EAAC;AAAR,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuC1B,KAAvC,CANL,CADJ;AAUA,CA9CD","sourcesContent":["import React, { useRef } from 'react';\r\nimport Router from 'next/router';\r\nconst endpoint = 'http://localhost:1337/auth/local';\r\n\r\nexport default() =>{\r\n    const loginRef = useRef();\r\n    const pwdRef = useRef();\r\n    const [error, setError ] = React.useState('');\r\n\r\n\r\n    const login = async() => {\r\n        const identifier = loginRef.current.value;\r\n        const password = pwdRef.current.value;\r\n\r\n    try{\r\n        const {jwt,user} = await fetch(endpoint,{\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-type' : 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                identifier,\r\n                password,\r\n            }),\r\n        }).then( res=> {\r\n            if (res.status !== 200){\r\n                throw new Error('Error Loggin In, Non 200 Status code received!');\r\n            }\r\n            return res.json();\r\n        });\r\n        window.sessionStorage.setItem('jwt',jwt);\r\n        window.sessionStorage.setItem('user',JSON.stringify(user));\r\n    \r\n       Router.push('/'); //Basically we can redirect user to a specific page after authentication .\r\n        } catch(e){\r\n            setError(e.toString());\r\n\r\n        }\r\n};\r\n \r\n return(\r\n     <>\r\n <div style={{display:'flex', flexDirection: 'column', width:300}}>\r\n<input type=\"text\" placeholder=\"Login\"  ref= {loginRef} />\r\n<input type=\"password\" placeholder=\"Password\" ref={pwdRef} />\r\n<button onClick={ () => login()}> Login </button>\r\n</div> \r\n {error &&<div style={{border:'1px red solid'}}>{error}</div>}\r\n</>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}