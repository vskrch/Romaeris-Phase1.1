{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Strapi\\\\my-project\\\\pages\\\\login.js\";\nvar __jsx = React.createElement;\nimport Router from 'next/router';\nimport React, { useRef, useState } from 'react';\nvar endpoint = 'http://localhost:1337/auth/local';\nexport default (function () {\n  var loginRef = useRef();\n  var pwdRef = useRef();\n\n  var _useState = useState(''),\n      error = _useState[0],\n      setError = _useState[1];\n\n  var login = function login() {\n    var identifier, password, _ref, jwt, user;\n\n    return _regeneratorRuntime.async(function login$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            identifier = loginRef.current.value;\n            password = pwdRef.current.value;\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(fetch(endpoint, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: _JSON$stringify({\n                identifier: identifier,\n                password: password\n              })\n            }).then(function (res) {\n              if (res.status !== 200) {\n                throw new Error('Error logging in, non 200 code');\n              }\n\n              return res.json();\n            }));\n\n          case 5:\n            _ref = _context.sent;\n            jwt = _ref.jwt;\n            user = _ref.user;\n            window.sessionStorage.setItem('jwt', jwt);\n            window.sessionStorage.setItem('user', _JSON$stringify(user));\n            Router.push('/');\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](2);\n            setError(_context.t0.toString());\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 13]]);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      width: 300\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"Username or email\",\n    ref: loginRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    type: \"password\",\n    placeholder: \"Password\",\n    ref: pwdRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    onClick: function onClick() {\n      return login();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Login\")), error && __jsx(\"div\", {\n    style: {\n      border: '1px red solid'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, error));\n});","map":{"version":3,"sources":["C:/Users/user/Desktop/Strapi/my-project/pages/login.js"],"names":["Router","React","useRef","useState","endpoint","loginRef","pwdRef","error","setError","login","identifier","current","value","password","fetch","method","headers","body","then","res","status","Error","json","jwt","user","window","sessionStorage","setItem","push","toString","display","flexDirection","width","border"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,IAAeC,MAAf,EAAuBC,QAAvB,QAAsC,OAAtC;AAEA,IAAMC,QAAQ,GAAG,kCAAjB;AAEA,gBAAe,YAAM;AACnB,MAAMC,QAAQ,GAAGH,MAAM,EAAvB;AACA,MAAMI,MAAM,GAAGJ,MAAM,EAArB;;AAFmB,kBAGOC,QAAQ,CAAC,EAAD,CAHf;AAAA,MAGZI,KAHY;AAAA,MAGLC,QAHK;;AAKnB,MAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACNC,YAAAA,UADM,GACOL,QAAQ,CAACM,OAAT,CAAiBC,KADxB;AAENC,YAAAA,QAFM,GAEKP,MAAM,CAACK,OAAP,CAAeC,KAFpB;AAAA;AAAA;AAAA,6CAKgBE,KAAK,CAACV,QAAD,EAAW;AACxCW,cAAAA,MAAM,EAAE,MADgC;AAExCC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAF+B;AAKxCC,cAAAA,IAAI,EAAE,gBAAe;AACnBP,gBAAAA,UAAU,EAAVA,UADmB;AAEnBG,gBAAAA,QAAQ,EAARA;AAFmB,eAAf;AALkC,aAAX,CAAL,CASvBK,IATuB,CASlB,UAAAC,GAAG,EAAI;AACb,kBAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,sBAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACD;;AACD,qBAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,aAdyB,CALhB;;AAAA;AAAA;AAKHC,YAAAA,GALG,QAKHA,GALG;AAKEC,YAAAA,IALF,QAKEA,IALF;AAqBVC,YAAAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,KAA9B,EAAqCJ,GAArC;AACAE,YAAAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,MAA9B,EAAsC,gBAAeH,IAAf,CAAtC;AAEAxB,YAAAA,MAAM,CAAC4B,IAAP,CAAY,GAAZ;AAxBU;AAAA;;AAAA;AAAA;AAAA;AA0BVpB,YAAAA,QAAQ,CAAC,YAAEqB,QAAF,EAAD,CAAR;;AA1BU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AA8BA,SACE,4BACE;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,OAAO,EAAE,MAAV;AAAkBC,MAAAA,aAAa,EAAE,QAAjC;AAA2CC,MAAAA,KAAK,EAAE;AAAlD,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,mBAA/B;AAAmD,IAAA,GAAG,EAAE3B,QAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,WAAW,EAAC,UAAnC;AAA8C,IAAA,GAAG,EAAEC,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMG,KAAK,EAAX;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHF,CADF,EAMGF,KAAK,IAAI;AAAK,IAAA,KAAK,EAAE;AAAC0B,MAAAA,MAAM,EAAE;AAAT,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwC1B,KAAxC,CANZ,CADF;AAUD,CA7CD","sourcesContent":["import Router from 'next/router';\r\nimport React, {useRef, useState} from 'react';\r\n\r\nconst endpoint = 'http://localhost:1337/auth/local';\r\n\r\nexport default () => {\r\n  const loginRef = useRef();\r\n  const pwdRef = useRef();\r\n  const [error, setError] = useState('');\r\n\r\n  const login = async () => {\r\n    const identifier = loginRef.current.value;\r\n    const password = pwdRef.current.value;\r\n\r\n    try {\r\n      const {jwt, user} = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          identifier,\r\n          password,\r\n        }),\r\n      }).then(res => {\r\n        if (res.status !== 200) {\r\n          throw new Error('Error logging in, non 200 code');\r\n        }\r\n        return res.json();\r\n      });\r\n\r\n      window.sessionStorage.setItem('jwt', jwt);\r\n      window.sessionStorage.setItem('user', JSON.stringify(user));\r\n\r\n      Router.push('/');\r\n    } catch (e) {\r\n      setError(e.toString());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={{display: 'flex', flexDirection: 'column', width: 300}}>\r\n        <input type=\"text\" placeholder=\"Username or email\" ref={loginRef} />\r\n        <input type=\"password\" placeholder=\"Password\" ref={pwdRef} />\r\n        <button onClick={() => login()}>Login</button>\r\n      </div>\r\n      {error && <div style={{border: '1px red solid'}}>{error}</div>}\r\n    </>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}